

# Auditoria Completa e Fluxo Automatizado para Download e Transcri√ß√£o de V√≠deos com GPU no Windows 11 + WSL2

## Contexto do Ambiente

- Sistema operacional principal: **Windows 11** com suporte ao **WSL2**
- Distro Linux: **Ubuntu 22.04 LTS** (WSL2)
- GPU NVIDIA: **GeForce RTX 3060 Laptop GPU** com driver NVIDIA Studio atualizado
- Pasta de trabalho para v√≠deos: `~/videos` no WSL
- Projeto de transcri√ß√£o: `~/faster_whisper_project` com ambiente Python virtual (`venv`)

## Ferramentas Utilizadas

- `yt-dlp` para download de v√≠deo protegidos via HLS com cookies e referer
- `wget` para baixar legendas
- Faster Whisper para transcri√ß√£o acelerada (GPU/CPU)
- Python 3.9+ com PyTorch instalado no ambiente virtual

***

## Fluxo de Trabalho Detalhado

### 1. Preparar pasta para v√≠deos

```bash
mkdir -p ~/videos
sudo apt update && sudo apt install -y yt-dlp wget ffmpeg
```

### 2. Autentica√ß√£o e obten√ß√£o das URLs

- Usar Firefox com extens√µes ‚Äúcookies.txt‚Äù para exportar cookies autenticados
- Usar ‚ÄúHLS Stream Detector‚Äù para extrair URLs de v√≠deo `.m3u8` e legendas `.srt`
- Salvar essas URLs no Windows em `links.txt`

### 3. Transferir o arquivo `links.txt` para o WSL

```bash
cp "/mnt/c/Users/Paulo-PC/Downloads/links.txt" ~/videos/
```

### 4. Gerar listas espec√≠ficas a partir de `links.txt`

```bash
cd ~/videos

# V√≠deos 1080p
grep -o 'https://[^ ]*playlist-1080p\.m3u8[^ ]*' links.txt > lista_videos_1080p.txt

# Legendas pt-br
grep -o 'https://[^ ]*pt-br\.srt[^ ]*' links.txt > lista_legendas.txt
```

### 5. Download dos arquivos

```bash
# Baixar v√≠deos com yt-dlp, passando cookies e referer para evitar bloqueios
yt-dlp -a lista_videos_1080p.txt \
       --cookies ~/cookies.txt \
       --referer "https://posartmed.grupoa.education/" \
       -o "aula_%(autonumber)02d.mp4" \
       --concurrent-fragments 4

# Apagar poss√≠veis legendas baixadas erradas
rm pt-br.srt\?*

# Baixar legendas nomeando manualmente para aula_XX.srt
wget -O aula_01.srt "<URL_legenda_1>"
wget -O aula_02.srt "<URL_legenda_2>"
# Repetir para todas as 9 legendas
```

### 6. Script de transcri√ß√£o com Faster Whisper (suportando CPU e GPU)

Crie `transcribe_batch.py`:

```python
import os, gc, torch
from faster_whisper import WhisperModel

# Para usar GPU, altere device='cuda', compute_type='float16'
# Para CPU fallback, use device='cpu', compute_type='int8'
model = WhisperModel("medium", device="cuda", compute_type="float16")
video_folder = os.path.expanduser("~/videos")

for f in sorted(os.listdir(video_folder)):
    if f.lower().endswith(".mp4"):
        transcr = f.replace(".mp4", "_transcricao.txt")
        if not os.path.exists(os.path.join(video_folder, transcr)):
            print(f"üé¨ Transcrevendo: {f}")
            segments, info = model.transcribe(os.path.join(video_folder, f), language="pt", beam_size=1, vad_filter=True, vad_parameters=dict(min_silence_duration_ms=500))
            with open(os.path.join(video_folder, transcr), "w", encoding="utf-8") as fo:
                for seg in segments:
                    fo.write(f"[{seg.start:.2f}s‚Üí{seg.end:.2f}s] {seg.text}\n")
            print(f"‚úÖ Salvo: {transcr}")
            gc.collect()
            torch.cuda.empty_cache()
print("üéâ Todas as transcri√ß√µes conclu√≠das!")
```

### 7. Configura√ß√£o CUDA e cuDNN para WSL2 Ubuntu 22.04

#### Problema Comum
- Ubuntu 22.04 n√£o tem cuDNN 9 via apt, apenas cuDNN 8, pela compatibilidade do sistema.
- Fast Whisper requer cuDNN 9 para rodar GPU sem erros.

#### Solu√ß√£o Automatizada (script para preparar reposit√≥rio, instalar CUDA 12.1 e cuDNN 9)

```bash
#!/bin/bash
set -e

curl -fsSL https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/3bf863cc.pub | sudo gpg --dearmor -o /usr/share/keyrings/cuda-archive-keyring.gpg

echo "deb [signed-by=/usr/share/keyrings/cuda-archive-keyring.gpg] https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/ /" | sudo tee /etc/apt/sources.list.d/cuda.list

sudo apt update
sudo apt install -y cuda-toolkit-12-1 libcudnn9 libcudnn9-dev

echo 'export PATH=/usr/local/cuda-12.1/bin:$PATH' >> ~/.bashrc
 echo 'export LD_LIBRARY_PATH=/usr/local/cuda-12.1/lib64:$LD_LIBRARY_PATH' >> ~/.bashrc
source ~/.bashrc

sudo ln -sf /usr/local/cuda-12.1/lib64/libcudnn_ops_infer.so.9 /usr/local/cuda-12.1/lib64/libcudnn_ops.so.9
sudo ln -sf /usr/local/cuda-12.1/lib64/libcudnn_cnn_infer.so.9 /usr/local/cuda-12.1/lib64/libcudnn_cnn.so.9
sudo ln -sf /usr/local/cuda-12.1/lib64/libcudnn_cnn_train.so.9 /usr/local/cuda-12.1/lib64/libcudnn_cnn_train.so.9
sudo ln -sf /usr/local/cuda-12.1/lib64/libcudnn.so.9 /usr/local/cuda-12.1/lib64/libcudnn.so.9

powershell.exe wsl --shutdown

echo "Instala√ß√£o conclu√≠da, reabra o Ubuntu para testar GPU e rodar transcri√ß√£o"
```

### 8. Diagn√≥stico e resolu√ß√£o de erros comuns

- Erro de s√≠mbolo cuDNN pode ser mitigado criando links simb√≥licos da vers√£o 8 para 9 via `ln -sf`
- Se persistir a incompatibilidade recomenda-se migrar para Ubuntu 20.04 no WSL2 para melhor suporte a CUDA/cuDNN padr√£o
- Para continuar transcrevendo em CPU sem lentid√£o, altere no script `device="cpu", compute_type="int8"`

### 9. Acesso aos arquivos

- WSL2: `~/videos` em Ubuntu possuindo v√≠deos, legendas e transcri√ß√µes
- Windows Explorer: `\\wsl$\Ubuntu\home\diablo\videos`
- Copiar arquivos para Windows local:

```bash
mkdir -p /mnt/d/MeusDownloads/Videos
cp ~/videos/* /mnt/d/MeusDownloads/Videos/
```

### 10. Monitorar GPU

```powershell
wsl nvidia-smi -l 2
```

## Erros Superados & Aprendizados

- Prote√ß√£o HLS: V√≠deos protegidos via tokens e cookies exigem uso de cookies.txt e referer no yt-dlp
- Legendas baixadas com nome truncado corrigido via wget manual com `-O`
- Erros cuDNN: Aus√™ncia/vers√£o incompat√≠vel coregidos com instala√ß√£o manual do CUDA Toolkit 12.1 e cuDNN 9 e links simb√≥licos
- Transcri√ß√£o via GPU somente rodou ap√≥s configura√ß√£o minuciosa do ambiente CUDA/cuDNN no WSL2
- Processos longos podem ser executados em background com nohup

***

Este protocolo completo √© apropriado para importar a qualquer momento e replicar seu setup em novo sistema, garantindo downloads, transcri√ß√£o e uso da GPU no ambiente Windows 11 + Ubuntu 22.04 WSL2 + NVIDIA RTX 3060.

[1](https://www.reddit.com/r/OpenAI/comments/18lm504/how_do_i_force_whisper_to_use_gpu_instead_of_cpu/)
[2](https://github.com/guillaumekln/faster-whisper/issues/442)
[3](https://github.com/2g4/whisper.cpp-wsl-nvidia)
[4](https://forums.fast.ai/t/platform-windows-10-using-wsl2-w-gpu/73521)
[5](https://www.youtube.com/watch?v=Kyc0AgMIBSU)
[6](https://learn.microsoft.com/pt-br/windows/wsl/tutorials/gpu-compute)
[7](https://docs.nvidia.com/cuda/wsl-user-guide/index.html)
[8](https://learn.microsoft.com/en-us/windows/ai/directml/gpu-cuda-in-wsl)
